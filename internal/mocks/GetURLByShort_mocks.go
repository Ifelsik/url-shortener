// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/Ifelsik/url-shortener/internal/app/url"
	mock "github.com/stretchr/testify/mock"
)

// NewMockGetURLByShort creates a new instance of MockGetURLByShort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGetURLByShort(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGetURLByShort {
	mock := &MockGetURLByShort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockGetURLByShort is an autogenerated mock type for the GetURLByShort type
type MockGetURLByShort struct {
	mock.Mock
}

type MockGetURLByShort_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGetURLByShort) EXPECT() *MockGetURLByShort_Expecter {
	return &MockGetURLByShort_Expecter{mock: &_m.Mock}
}

// Handle provides a mock function for the type MockGetURLByShort
func (_mock *MockGetURLByShort) Handle(ctx context.Context, request *url.GetURLByShortRequest) (*url.GetURLByShortResponse, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Handle")
	}

	var r0 *url.GetURLByShortResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *url.GetURLByShortRequest) (*url.GetURLByShortResponse, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *url.GetURLByShortRequest) *url.GetURLByShortResponse); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*url.GetURLByShortResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *url.GetURLByShortRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGetURLByShort_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type MockGetURLByShort_Handle_Call struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//   - ctx context.Context
//   - request *url.GetURLByShortRequest
func (_e *MockGetURLByShort_Expecter) Handle(ctx interface{}, request interface{}) *MockGetURLByShort_Handle_Call {
	return &MockGetURLByShort_Handle_Call{Call: _e.mock.On("Handle", ctx, request)}
}

func (_c *MockGetURLByShort_Handle_Call) Run(run func(ctx context.Context, request *url.GetURLByShortRequest)) *MockGetURLByShort_Handle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *url.GetURLByShortRequest
		if args[1] != nil {
			arg1 = args[1].(*url.GetURLByShortRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockGetURLByShort_Handle_Call) Return(getURLByShortResponse *url.GetURLByShortResponse, err error) *MockGetURLByShort_Handle_Call {
	_c.Call.Return(getURLByShortResponse, err)
	return _c
}

func (_c *MockGetURLByShort_Handle_Call) RunAndReturn(run func(ctx context.Context, request *url.GetURLByShortRequest) (*url.GetURLByShortResponse, error)) *MockGetURLByShort_Handle_Call {
	_c.Call.Return(run)
	return _c
}
