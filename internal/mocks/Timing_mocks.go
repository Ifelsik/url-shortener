// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"time"

	mock "github.com/stretchr/testify/mock"
)

// NewMockTiming creates a new instance of MockTiming. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTiming(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTiming {
	mock := &MockTiming{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTiming is an autogenerated mock type for the Timing type
type MockTiming struct {
	mock.Mock
}

type MockTiming_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTiming) EXPECT() *MockTiming_Expecter {
	return &MockTiming_Expecter{mock: &_m.Mock}
}

// AfterNow provides a mock function for the type MockTiming
func (_mock *MockTiming) AfterNow(d time.Duration) time.Time {
	ret := _mock.Called(d)

	if len(ret) == 0 {
		panic("no return value specified for AfterNow")
	}

	var r0 time.Time
	if returnFunc, ok := ret.Get(0).(func(time.Duration) time.Time); ok {
		r0 = returnFunc(d)
	} else {
		r0 = ret.Get(0).(time.Time)
	}
	return r0
}

// MockTiming_AfterNow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AfterNow'
type MockTiming_AfterNow_Call struct {
	*mock.Call
}

// AfterNow is a helper method to define mock.On call
//   - d time.Duration
func (_e *MockTiming_Expecter) AfterNow(d interface{}) *MockTiming_AfterNow_Call {
	return &MockTiming_AfterNow_Call{Call: _e.mock.On("AfterNow", d)}
}

func (_c *MockTiming_AfterNow_Call) Run(run func(d time.Duration)) *MockTiming_AfterNow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 time.Duration
		if args[0] != nil {
			arg0 = args[0].(time.Duration)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTiming_AfterNow_Call) Return(time1 time.Time) *MockTiming_AfterNow_Call {
	_c.Call.Return(time1)
	return _c
}

func (_c *MockTiming_AfterNow_Call) RunAndReturn(run func(d time.Duration) time.Time) *MockTiming_AfterNow_Call {
	_c.Call.Return(run)
	return _c
}

// Now provides a mock function for the type MockTiming
func (_mock *MockTiming) Now() time.Time {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Now")
	}

	var r0 time.Time
	if returnFunc, ok := ret.Get(0).(func() time.Time); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(time.Time)
	}
	return r0
}

// MockTiming_Now_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Now'
type MockTiming_Now_Call struct {
	*mock.Call
}

// Now is a helper method to define mock.On call
func (_e *MockTiming_Expecter) Now() *MockTiming_Now_Call {
	return &MockTiming_Now_Call{Call: _e.mock.On("Now")}
}

func (_c *MockTiming_Now_Call) Run(run func()) *MockTiming_Now_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTiming_Now_Call) Return(time1 time.Time) *MockTiming_Now_Call {
	_c.Call.Return(time1)
	return _c
}

func (_c *MockTiming_Now_Call) RunAndReturn(run func() time.Time) *MockTiming_Now_Call {
	_c.Call.Return(run)
	return _c
}

// Since provides a mock function for the type MockTiming
func (_mock *MockTiming) Since(start time.Time) time.Duration {
	ret := _mock.Called(start)

	if len(ret) == 0 {
		panic("no return value specified for Since")
	}

	var r0 time.Duration
	if returnFunc, ok := ret.Get(0).(func(time.Time) time.Duration); ok {
		r0 = returnFunc(start)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}
	return r0
}

// MockTiming_Since_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Since'
type MockTiming_Since_Call struct {
	*mock.Call
}

// Since is a helper method to define mock.On call
//   - start time.Time
func (_e *MockTiming_Expecter) Since(start interface{}) *MockTiming_Since_Call {
	return &MockTiming_Since_Call{Call: _e.mock.On("Since", start)}
}

func (_c *MockTiming_Since_Call) Run(run func(start time.Time)) *MockTiming_Since_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 time.Time
		if args[0] != nil {
			arg0 = args[0].(time.Time)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTiming_Since_Call) Return(duration time.Duration) *MockTiming_Since_Call {
	_c.Call.Return(duration)
	return _c
}

func (_c *MockTiming_Since_Call) RunAndReturn(run func(start time.Time) time.Duration) *MockTiming_Since_Call {
	_c.Call.Return(run)
	return _c
}
