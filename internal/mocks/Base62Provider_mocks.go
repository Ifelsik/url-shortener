// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockBase62Provider creates a new instance of MockBase62Provider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBase62Provider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBase62Provider {
	mock := &MockBase62Provider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockBase62Provider is an autogenerated mock type for the Base62Provider type
type MockBase62Provider struct {
	mock.Mock
}

type MockBase62Provider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBase62Provider) EXPECT() *MockBase62Provider_Expecter {
	return &MockBase62Provider_Expecter{mock: &_m.Mock}
}

// EncodeToString provides a mock function for the type MockBase62Provider
func (_mock *MockBase62Provider) EncodeToString(data []byte) string {
	ret := _mock.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for EncodeToString")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func([]byte) string); ok {
		r0 = returnFunc(data)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockBase62Provider_EncodeToString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EncodeToString'
type MockBase62Provider_EncodeToString_Call struct {
	*mock.Call
}

// EncodeToString is a helper method to define mock.On call
//   - data []byte
func (_e *MockBase62Provider_Expecter) EncodeToString(data interface{}) *MockBase62Provider_EncodeToString_Call {
	return &MockBase62Provider_EncodeToString_Call{Call: _e.mock.On("EncodeToString", data)}
}

func (_c *MockBase62Provider_EncodeToString_Call) Run(run func(data []byte)) *MockBase62Provider_EncodeToString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []byte
		if args[0] != nil {
			arg0 = args[0].([]byte)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockBase62Provider_EncodeToString_Call) Return(s string) *MockBase62Provider_EncodeToString_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockBase62Provider_EncodeToString_Call) RunAndReturn(run func(data []byte) string) *MockBase62Provider_EncodeToString_Call {
	_c.Call.Return(run)
	return _c
}
