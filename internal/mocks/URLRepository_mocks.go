// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/Ifelsik/url-shortener/internal/domain/url"
	mock "github.com/stretchr/testify/mock"
)

// NewMockURLRepository creates a new instance of MockURLRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockURLRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockURLRepository {
	mock := &MockURLRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockURLRepository is an autogenerated mock type for the URLRepository type
type MockURLRepository struct {
	mock.Mock
}

type MockURLRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockURLRepository) EXPECT() *MockURLRepository_Expecter {
	return &MockURLRepository_Expecter{mock: &_m.Mock}
}

// Add provides a mock function for the type MockURLRepository
func (_mock *MockURLRepository) Add(ctx context.Context, url1 *url.URL) (*url.URL, error) {
	ret := _mock.Called(ctx, url1)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 *url.URL
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *url.URL) (*url.URL, error)); ok {
		return returnFunc(ctx, url1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *url.URL) *url.URL); ok {
		r0 = returnFunc(ctx, url1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*url.URL)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *url.URL) error); ok {
		r1 = returnFunc(ctx, url1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockURLRepository_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockURLRepository_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - ctx context.Context
//   - url1 *url.URL
func (_e *MockURLRepository_Expecter) Add(ctx interface{}, url1 interface{}) *MockURLRepository_Add_Call {
	return &MockURLRepository_Add_Call{Call: _e.mock.On("Add", ctx, url1)}
}

func (_c *MockURLRepository_Add_Call) Run(run func(ctx context.Context, url1 *url.URL)) *MockURLRepository_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *url.URL
		if args[1] != nil {
			arg1 = args[1].(*url.URL)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockURLRepository_Add_Call) Return(uRL *url.URL, err error) *MockURLRepository_Add_Call {
	_c.Call.Return(uRL, err)
	return _c
}

func (_c *MockURLRepository_Add_Call) RunAndReturn(run func(ctx context.Context, url1 *url.URL) (*url.URL, error)) *MockURLRepository_Add_Call {
	_c.Call.Return(run)
	return _c
}

// GetByShortKey provides a mock function for the type MockURLRepository
func (_mock *MockURLRepository) GetByShortKey(ctx context.Context, shortKey string) (*url.URL, error) {
	ret := _mock.Called(ctx, shortKey)

	if len(ret) == 0 {
		panic("no return value specified for GetByShortKey")
	}

	var r0 *url.URL
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*url.URL, error)); ok {
		return returnFunc(ctx, shortKey)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *url.URL); ok {
		r0 = returnFunc(ctx, shortKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*url.URL)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, shortKey)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockURLRepository_GetByShortKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByShortKey'
type MockURLRepository_GetByShortKey_Call struct {
	*mock.Call
}

// GetByShortKey is a helper method to define mock.On call
//   - ctx context.Context
//   - shortKey string
func (_e *MockURLRepository_Expecter) GetByShortKey(ctx interface{}, shortKey interface{}) *MockURLRepository_GetByShortKey_Call {
	return &MockURLRepository_GetByShortKey_Call{Call: _e.mock.On("GetByShortKey", ctx, shortKey)}
}

func (_c *MockURLRepository_GetByShortKey_Call) Run(run func(ctx context.Context, shortKey string)) *MockURLRepository_GetByShortKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockURLRepository_GetByShortKey_Call) Return(uRL *url.URL, err error) *MockURLRepository_GetByShortKey_Call {
	_c.Call.Return(uRL, err)
	return _c
}

func (_c *MockURLRepository_GetByShortKey_Call) RunAndReturn(run func(ctx context.Context, shortKey string) (*url.URL, error)) *MockURLRepository_GetByShortKey_Call {
	_c.Call.Return(run)
	return _c
}
