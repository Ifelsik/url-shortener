// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/Ifelsik/url-shortener/internal/pkg/logger"
	mock "github.com/stretchr/testify/mock"
)

// NewMockLogger creates a new instance of MockLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLogger {
	mock := &MockLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLogger is an autogenerated mock type for the Logger type
type MockLogger struct {
	mock.Mock
}

type MockLogger_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLogger) EXPECT() *MockLogger_Expecter {
	return &MockLogger_Expecter{mock: &_m.Mock}
}

// Debugf provides a mock function for the type MockLogger
func (_mock *MockLogger) Debugf(format string, args ...any) {
	if len(args) > 0 {
		_mock.Called(format, args)
	} else {
		_mock.Called(format)
	}

	return
}

// MockLogger_Debugf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debugf'
type MockLogger_Debugf_Call struct {
	*mock.Call
}

// Debugf is a helper method to define mock.On call
//   - format string
//   - args ...any
func (_e *MockLogger_Expecter) Debugf(format interface{}, args ...interface{}) *MockLogger_Debugf_Call {
	return &MockLogger_Debugf_Call{Call: _e.mock.On("Debugf",
		append([]interface{}{format}, args...)...)}
}

func (_c *MockLogger_Debugf_Call) Run(run func(format string, args ...any)) *MockLogger_Debugf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []any
		var variadicArgs []any
		if len(args) > 1 {
			variadicArgs = args[1].([]any)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockLogger_Debugf_Call) Return() *MockLogger_Debugf_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Debugf_Call) RunAndReturn(run func(format string, args ...any)) *MockLogger_Debugf_Call {
	_c.Run(run)
	return _c
}

// Errorf provides a mock function for the type MockLogger
func (_mock *MockLogger) Errorf(format string, args ...any) {
	if len(args) > 0 {
		_mock.Called(format, args)
	} else {
		_mock.Called(format)
	}

	return
}

// MockLogger_Errorf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Errorf'
type MockLogger_Errorf_Call struct {
	*mock.Call
}

// Errorf is a helper method to define mock.On call
//   - format string
//   - args ...any
func (_e *MockLogger_Expecter) Errorf(format interface{}, args ...interface{}) *MockLogger_Errorf_Call {
	return &MockLogger_Errorf_Call{Call: _e.mock.On("Errorf",
		append([]interface{}{format}, args...)...)}
}

func (_c *MockLogger_Errorf_Call) Run(run func(format string, args ...any)) *MockLogger_Errorf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []any
		var variadicArgs []any
		if len(args) > 1 {
			variadicArgs = args[1].([]any)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockLogger_Errorf_Call) Return() *MockLogger_Errorf_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Errorf_Call) RunAndReturn(run func(format string, args ...any)) *MockLogger_Errorf_Call {
	_c.Run(run)
	return _c
}

// Fatalf provides a mock function for the type MockLogger
func (_mock *MockLogger) Fatalf(format string, args ...any) {
	if len(args) > 0 {
		_mock.Called(format, args)
	} else {
		_mock.Called(format)
	}

	return
}

// MockLogger_Fatalf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fatalf'
type MockLogger_Fatalf_Call struct {
	*mock.Call
}

// Fatalf is a helper method to define mock.On call
//   - format string
//   - args ...any
func (_e *MockLogger_Expecter) Fatalf(format interface{}, args ...interface{}) *MockLogger_Fatalf_Call {
	return &MockLogger_Fatalf_Call{Call: _e.mock.On("Fatalf",
		append([]interface{}{format}, args...)...)}
}

func (_c *MockLogger_Fatalf_Call) Run(run func(format string, args ...any)) *MockLogger_Fatalf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []any
		var variadicArgs []any
		if len(args) > 1 {
			variadicArgs = args[1].([]any)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockLogger_Fatalf_Call) Return() *MockLogger_Fatalf_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Fatalf_Call) RunAndReturn(run func(format string, args ...any)) *MockLogger_Fatalf_Call {
	_c.Run(run)
	return _c
}

// Infof provides a mock function for the type MockLogger
func (_mock *MockLogger) Infof(format string, args ...any) {
	if len(args) > 0 {
		_mock.Called(format, args)
	} else {
		_mock.Called(format)
	}

	return
}

// MockLogger_Infof_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Infof'
type MockLogger_Infof_Call struct {
	*mock.Call
}

// Infof is a helper method to define mock.On call
//   - format string
//   - args ...any
func (_e *MockLogger_Expecter) Infof(format interface{}, args ...interface{}) *MockLogger_Infof_Call {
	return &MockLogger_Infof_Call{Call: _e.mock.On("Infof",
		append([]interface{}{format}, args...)...)}
}

func (_c *MockLogger_Infof_Call) Run(run func(format string, args ...any)) *MockLogger_Infof_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []any
		var variadicArgs []any
		if len(args) > 1 {
			variadicArgs = args[1].([]any)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockLogger_Infof_Call) Return() *MockLogger_Infof_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Infof_Call) RunAndReturn(run func(format string, args ...any)) *MockLogger_Infof_Call {
	_c.Run(run)
	return _c
}

// Warningf provides a mock function for the type MockLogger
func (_mock *MockLogger) Warningf(format string, args ...any) {
	if len(args) > 0 {
		_mock.Called(format, args)
	} else {
		_mock.Called(format)
	}

	return
}

// MockLogger_Warningf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warningf'
type MockLogger_Warningf_Call struct {
	*mock.Call
}

// Warningf is a helper method to define mock.On call
//   - format string
//   - args ...any
func (_e *MockLogger_Expecter) Warningf(format interface{}, args ...interface{}) *MockLogger_Warningf_Call {
	return &MockLogger_Warningf_Call{Call: _e.mock.On("Warningf",
		append([]interface{}{format}, args...)...)}
}

func (_c *MockLogger_Warningf_Call) Run(run func(format string, args ...any)) *MockLogger_Warningf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []any
		var variadicArgs []any
		if len(args) > 1 {
			variadicArgs = args[1].([]any)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockLogger_Warningf_Call) Return() *MockLogger_Warningf_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Warningf_Call) RunAndReturn(run func(format string, args ...any)) *MockLogger_Warningf_Call {
	_c.Run(run)
	return _c
}

// WithFields provides a mock function for the type MockLogger
func (_mock *MockLogger) WithFields(f logger.LoggerFields) logger.Logger {
	ret := _mock.Called(f)

	if len(ret) == 0 {
		panic("no return value specified for WithFields")
	}

	var r0 logger.Logger
	if returnFunc, ok := ret.Get(0).(func(logger.LoggerFields) logger.Logger); ok {
		r0 = returnFunc(f)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logger.Logger)
		}
	}
	return r0
}

// MockLogger_WithFields_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithFields'
type MockLogger_WithFields_Call struct {
	*mock.Call
}

// WithFields is a helper method to define mock.On call
//   - f logger.LoggerFields
func (_e *MockLogger_Expecter) WithFields(f interface{}) *MockLogger_WithFields_Call {
	return &MockLogger_WithFields_Call{Call: _e.mock.On("WithFields", f)}
}

func (_c *MockLogger_WithFields_Call) Run(run func(f logger.LoggerFields)) *MockLogger_WithFields_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 logger.LoggerFields
		if args[0] != nil {
			arg0 = args[0].(logger.LoggerFields)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLogger_WithFields_Call) Return(logger1 logger.Logger) *MockLogger_WithFields_Call {
	_c.Call.Return(logger1)
	return _c
}

func (_c *MockLogger_WithFields_Call) RunAndReturn(run func(f logger.LoggerFields) logger.Logger) *MockLogger_WithFields_Call {
	_c.Call.Return(run)
	return _c
}
