// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockHasher creates a new instance of MockHasher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHasher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHasher {
	mock := &MockHasher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockHasher is an autogenerated mock type for the Hasher type
type MockHasher struct {
	mock.Mock
}

type MockHasher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHasher) EXPECT() *MockHasher_Expecter {
	return &MockHasher_Expecter{mock: &_m.Mock}
}

// String provides a mock function for the type MockHasher
func (_mock *MockHasher) String(hash string) string {
	ret := _mock.Called(hash)

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(hash)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockHasher_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type MockHasher_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
//   - hash string
func (_e *MockHasher_Expecter) String(hash interface{}) *MockHasher_String_Call {
	return &MockHasher_String_Call{Call: _e.mock.On("String", hash)}
}

func (_c *MockHasher_String_Call) Run(run func(hash string)) *MockHasher_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockHasher_String_Call) Return(s string) *MockHasher_String_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockHasher_String_Call) RunAndReturn(run func(hash string) string) *MockHasher_String_Call {
	_c.Call.Return(run)
	return _c
}
