// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/Ifelsik/url-shortener/internal/domain/user"
	mock "github.com/stretchr/testify/mock"
)

// NewMockUserRepository creates a new instance of MockUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRepository {
	mock := &MockUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserRepository is an autogenerated mock type for the UserRepository type
type MockUserRepository struct {
	mock.Mock
}

type MockUserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepository) EXPECT() *MockUserRepository_Expecter {
	return &MockUserRepository_Expecter{mock: &_m.Mock}
}

// Add provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) Add(ctx context.Context, user1 *user.User) (*user.User, error) {
	ret := _mock.Called(ctx, user1)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 *user.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *user.User) (*user.User, error)); ok {
		return returnFunc(ctx, user1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *user.User) *user.User); ok {
		r0 = returnFunc(ctx, user1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *user.User) error); ok {
		r1 = returnFunc(ctx, user1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockUserRepository_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - ctx context.Context
//   - user1 *user.User
func (_e *MockUserRepository_Expecter) Add(ctx interface{}, user1 interface{}) *MockUserRepository_Add_Call {
	return &MockUserRepository_Add_Call{Call: _e.mock.On("Add", ctx, user1)}
}

func (_c *MockUserRepository_Add_Call) Run(run func(ctx context.Context, user1 *user.User)) *MockUserRepository_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *user.User
		if args[1] != nil {
			arg1 = args[1].(*user.User)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserRepository_Add_Call) Return(user11 *user.User, err error) *MockUserRepository_Add_Call {
	_c.Call.Return(user11, err)
	return _c
}

func (_c *MockUserRepository_Add_Call) RunAndReturn(run func(ctx context.Context, user1 *user.User) (*user.User, error)) *MockUserRepository_Add_Call {
	_c.Call.Return(run)
	return _c
}

// GetByToken provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) GetByToken(ctx context.Context, token string) (*user.User, error) {
	ret := _mock.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for GetByToken")
	}

	var r0 *user.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*user.User, error)); ok {
		return returnFunc(ctx, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *user.User); ok {
		r0 = returnFunc(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_GetByToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByToken'
type MockUserRepository_GetByToken_Call struct {
	*mock.Call
}

// GetByToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockUserRepository_Expecter) GetByToken(ctx interface{}, token interface{}) *MockUserRepository_GetByToken_Call {
	return &MockUserRepository_GetByToken_Call{Call: _e.mock.On("GetByToken", ctx, token)}
}

func (_c *MockUserRepository_GetByToken_Call) Run(run func(ctx context.Context, token string)) *MockUserRepository_GetByToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserRepository_GetByToken_Call) Return(user1 *user.User, err error) *MockUserRepository_GetByToken_Call {
	_c.Call.Return(user1, err)
	return _c
}

func (_c *MockUserRepository_GetByToken_Call) RunAndReturn(run func(ctx context.Context, token string) (*user.User, error)) *MockUserRepository_GetByToken_Call {
	_c.Call.Return(run)
	return _c
}
